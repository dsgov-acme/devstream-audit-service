plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.24'
    id 'com.github.spotbugs'
    id 'pmd'
    id 'com.diffplug.spotless'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

apply from: "${rootDir}/gradle/code-quality.gradle"

repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

def cucumberVersion = '6.10.4'
def junitVersion = '5.7.2'


configurations {
    functionalTestImplementation
    functionalTestCompileOnly.extendsFrom functionalTestAnnotationProcessor
}

dependencies {
    functionalTestAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    functionalTestCompileOnly 'com.google.code.findbugs:annotations:3.0.1'

    functionalTestImplementation project(":client")

    functionalTestImplementation "io.cucumber:cucumber-java:${cucumberVersion}"
    functionalTestImplementation "io.cucumber:cucumber-junit-platform-engine:${cucumberVersion}"
    functionalTestImplementation "io.cucumber:cucumber-picocontainer:${cucumberVersion}"

    functionalTestImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    functionalTestImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

    functionalTestImplementation 'org.hamcrest:hamcrest-junit:2.0.0.0'

    functionalTestImplementation platform('org.springframework.boot:spring-boot-dependencies:3.1.3')
    functionalTestImplementation 'org.awaitility:awaitility:3.0.0'
    functionalTestImplementation 'com.google.cloud:google-cloud-secretmanager:2.24.0'
    functionalTestImplementation 'io.nuvalence.dsgov:dsgov-auth:1.0.0'
}

test {
    useJUnitPlatform()
}

sourceSets {
    functionalTest {
        java {}
    }
}

task functionalTest(type: Test) {
    def testConfig = new Properties()
    def configFile = file("configuration.properties")

    if (configFile.exists()) {
        configFile.withInputStream { testConfig.load(it) }
    }

    doFirst {
        println "starting functional tests at: " + System.currentTimeMillis()
    }

    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    outputs.upToDateWhen { false }
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    systemProperty("cucumber.plugin", "pretty, json:build/test-results/functionalTest/cucumber.json")
    finalizedBy generateCucumberReports

    if (testConfig.containsKey('url')) {
        environment 'SERVICE_URI', testConfig.getProperty('url')
    }
    if (testConfig.containsKey('authorization')) {
        environment 'AUTHORIZATION', testConfig.getProperty('authorization')
    }

    doLast {
        println "completing functional tests at: " + System.currentTimeMillis()
    }
}

cucumberReports {
    outputDir = file('build/reports/cucumber')
    reports = files('build/test-results/functionalTest/cucumber.json')
    testTasksFinalizedByReport = false
}
